# Generated by Django 5.2.4 on 2025-09-27 09:55

import django.db.models.deletion
from django.db import migrations, models

def migrate_locations(apps, schema_editor):
    Material = apps.get_model('inventory', 'Material')
    StorageLocation = apps.get_model('inventory', 'StorageLocation')
    
    # Create StorageLocation objects from the distinct location names in the old CharField
    locations = Material.objects.values_list('location', flat=True).distinct()
    for loc_name in locations:
        if loc_name and loc_name.strip():
            StorageLocation.objects.get_or_create(name=loc_name.strip())

    # Link each Material to its corresponding new StorageLocation object
    for material in Material.objects.all():
        if material.location and material.location.strip():
            loc_obj = StorageLocation.objects.get(name=material.location.strip())
            material.location_fk = loc_obj
            material.save()

def do_nothing(apps, schema_editor):
    # This is for the reverse migration, which we don't need to support for this change.
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0009_material_last_counted_by'),
    ]

    operations = [
        # 1. Create the new model
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='儲存地點')),
            ],
        ),
        # 2. Add a temporary nullable ForeignKey field
        migrations.AddField(
            model_name='material',
            name='location_fk',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.storagelocation'),
        ),
        # 3. Run the Python script to migrate data from the old field to the new one
        migrations.RunPython(migrate_locations, do_nothing),
        # 4. Remove the old CharField
        migrations.RemoveField(
            model_name='material',
            name='location',
        ),
        # 5. Rename the new field to the original name
        migrations.RenameField(
            model_name='material',
            old_name='location_fk',
            new_name='location',
        ),
        # 6. Alter the field to be non-nullable as it was originally intended
        migrations.AlterField(
            model_name='material',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='inventory.storagelocation', verbose_name='庫位'),
        ),
    ]